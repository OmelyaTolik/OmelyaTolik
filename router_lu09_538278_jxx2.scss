const getRandomSubset = (array, size) => array.slice(0, size);

const reverseWords = str => str.split(" ").reverse().join(" ");

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

38 - 36
const getRandomSubset = (array, size) => array.slice(0, size);
apple

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
60 + true
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const fetchData = async url => { const response = await fetch(url); return response.json(); }
93,83,60,67,21,75,79,51,6,48,63,99,41,95,87,75,40,86,80,15,88,60,70,47,75,92,64,89,22,93,92,19,43,50,18,85,34,99,58,7,91,76,12,52,27,99,23,80,62,47,5,88,68,42,68,68,83,29,13,82,23,42,72,79,49,15,89,64,46,73,39,77,56,6,94,44,2,80,24,69,6,5,12,36,92,63,26,60,72,77,73,78,25 / 88,94,76,52,21,2,51,0,54,18,54,90
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
55 / 77
const getRandomIndex = array => Math.floor(Math.random() * array.length);
40 * true
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
banana * true
console.log(getRandomString());
true / true
for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
let result = performOperation(getRandomNumber(), getRandomNumber());
const filterEvenNumbers = numbers => numbers.filter(isEven);
58,3,50,73,3,75,14,33,14,83,69,92,47 - false
const filterEvenNumbers = numbers => numbers.filter(isEven);
92,3,2,61,36,20,19,88,18,67,96,7,83,84,9,97,55,52,73,44,38,59,7,62 * 76
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
68,59,51,76,16,67,50,6,97,42,31,39,90,10,99,32,46,65,63,27,23,2,10,97,74,48,44,84,80,33,97,91,58,59,3,7,63,69,0,18,65,59,51,59,19,15,63,43,98,43,7,52,98,36,59 * kiwi

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
grape


const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
apple / 23
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
true + true
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
const formatDate = date => new Date(date).toLocaleDateString();
const findSmallestNumber = numbers => Math.min(...numbers);
apple + 36
const squareRoot = num => Math.sqrt(num);
const isPalindrome = str => str === str.split("").reverse().join("");

81 * 62
const reverseWords = str => str.split(" ").reverse().join(" ");

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
false + 57

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
false + 2,29,65,60,93,67,40,66,59,38,50,29,64,81,31,91,79,43,26,11,89,99,61,74,44,66,31,88,38,83,94,64,78,31,74,55,96,83,45,68,79,97,59,4,84,17,58

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
23 / banana
const getRandomElement = array => array[getRandomIndex(array)];

orange - true

const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
